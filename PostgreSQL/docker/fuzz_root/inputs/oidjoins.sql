SELECT	ctid, aggfnoidFROM	pg_catalog.pg_aggregate fkWHERE	aggfnoid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggfnoid);
SELECT	ctid, aggtransfnFROM	pg_catalog.pg_aggregate fkWHERE	aggtransfn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggtransfn);
SELECT	ctid, aggfinalfnFROM	pg_catalog.pg_aggregate fkWHERE	aggfinalfn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggfinalfn);
SELECT	ctid, aggcombinefnFROM	pg_catalog.pg_aggregate fkWHERE	aggcombinefn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggcombinefn);
SELECT	ctid, aggserialfnFROM	pg_catalog.pg_aggregate fkWHERE	aggserialfn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggserialfn);
SELECT	ctid, aggdeserialfnFROM	pg_catalog.pg_aggregate fkWHERE	aggdeserialfn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggdeserialfn);
SELECT	ctid, aggmtransfnFROM	pg_catalog.pg_aggregate fkWHERE	aggmtransfn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggmtransfn);
SELECT	ctid, aggminvtransfnFROM	pg_catalog.pg_aggregate fkWHERE	aggminvtransfn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggminvtransfn);
SELECT	ctid, aggmfinalfnFROM	pg_catalog.pg_aggregate fkWHERE	aggmfinalfn != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.aggmfinalfn);
SELECT	ctid, aggsortopFROM	pg_catalog.pg_aggregate fkWHERE	aggsortop != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.aggsortop);
SELECT	ctid, aggtranstypeFROM	pg_catalog.pg_aggregate fkWHERE	aggtranstype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.aggtranstype);
SELECT	ctid, aggmtranstypeFROM	pg_catalog.pg_aggregate fkWHERE	aggmtranstype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.aggmtranstype);
SELECT	ctid, amhandlerFROM	pg_catalog.pg_am fkWHERE	amhandler != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.amhandler);
SELECT	ctid, amopfamilyFROM	pg_catalog.pg_amop fkWHERE	amopfamily != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_opfamily pk WHERE pk.oid = fk.amopfamily);
SELECT	ctid, amoplefttypeFROM	pg_catalog.pg_amop fkWHERE	amoplefttype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.amoplefttype);
SELECT	ctid, amoprighttypeFROM	pg_catalog.pg_amop fkWHERE	amoprighttype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.amoprighttype);
SELECT	ctid, amopoprFROM	pg_catalog.pg_amop fkWHERE	amopopr != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.amopopr);
SELECT	ctid, amopmethodFROM	pg_catalog.pg_amop fkWHERE	amopmethod != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_am pk WHERE pk.oid = fk.amopmethod);
SELECT	ctid, amopsortfamilyFROM	pg_catalog.pg_amop fkWHERE	amopsortfamily != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_opfamily pk WHERE pk.oid = fk.amopsortfamily);
SELECT	ctid, amprocfamilyFROM	pg_catalog.pg_amproc fkWHERE	amprocfamily != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_opfamily pk WHERE pk.oid = fk.amprocfamily);
SELECT	ctid, amproclefttypeFROM	pg_catalog.pg_amproc fkWHERE	amproclefttype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.amproclefttype);
SELECT	ctid, amprocrighttypeFROM	pg_catalog.pg_amproc fkWHERE	amprocrighttype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.amprocrighttype);
SELECT	ctid, amprocFROM	pg_catalog.pg_amproc fkWHERE	amproc != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.amproc);
SELECT	ctid, adrelidFROM	pg_catalog.pg_attrdef fkWHERE	adrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.adrelid);
SELECT	ctid, attrelidFROM	pg_catalog.pg_attribute fkWHERE	attrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.attrelid);
SELECT	ctid, atttypidFROM	pg_catalog.pg_attribute fkWHERE	atttypid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.atttypid);
SELECT	ctid, attcollationFROM	pg_catalog.pg_attribute fkWHERE	attcollation != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.attcollation);
SELECT	ctid, roleidFROM	pg_catalog.pg_auth_members fkWHERE	roleid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.roleid);
SELECT	ctid, memberFROM	pg_catalog.pg_auth_members fkWHERE	member != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.member);
SELECT	ctid, grantorFROM	pg_catalog.pg_auth_members fkWHERE	grantor != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.grantor);
SELECT	ctid, castsourceFROM	pg_catalog.pg_cast fkWHERE	castsource != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.castsource);
SELECT	ctid, casttargetFROM	pg_catalog.pg_cast fkWHERE	casttarget != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.casttarget);
SELECT	ctid, castfuncFROM	pg_catalog.pg_cast fkWHERE	castfunc != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.castfunc);
SELECT	ctid, relnamespaceFROM	pg_catalog.pg_class fkWHERE	relnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.relnamespace);
SELECT	ctid, reltypeFROM	pg_catalog.pg_class fkWHERE	reltype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.reltype);
SELECT	ctid, reloftypeFROM	pg_catalog.pg_class fkWHERE	reloftype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.reloftype);
SELECT	ctid, relownerFROM	pg_catalog.pg_class fkWHERE	relowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.relowner);
SELECT	ctid, relamFROM	pg_catalog.pg_class fkWHERE	relam != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_am pk WHERE pk.oid = fk.relam);
SELECT	ctid, reltablespaceFROM	pg_catalog.pg_class fkWHERE	reltablespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tablespace pk WHERE pk.oid = fk.reltablespace);
SELECT	ctid, reltoastrelidFROM	pg_catalog.pg_class fkWHERE	reltoastrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.reltoastrelid);
SELECT	ctid, collnamespaceFROM	pg_catalog.pg_collation fkWHERE	collnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.collnamespace);
SELECT	ctid, collownerFROM	pg_catalog.pg_collation fkWHERE	collowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.collowner);
SELECT	ctid, connamespaceFROM	pg_catalog.pg_constraint fkWHERE	connamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.connamespace);
SELECT	ctid, conrelidFROM	pg_catalog.pg_constraint fkWHERE	conrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.conrelid);
SELECT	ctid, contypidFROM	pg_catalog.pg_constraint fkWHERE	contypid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.contypid);
SELECT	ctid, conindidFROM	pg_catalog.pg_constraint fkWHERE	conindid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.conindid);
SELECT	ctid, conparentidFROM	pg_catalog.pg_constraint fkWHERE	conparentid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint pk WHERE pk.oid = fk.conparentid);
SELECT	ctid, confrelidFROM	pg_catalog.pg_constraint fkWHERE	confrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.confrelid);
SELECT	ctid, connamespaceFROM	pg_catalog.pg_conversion fkWHERE	connamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.connamespace);
SELECT	ctid, conownerFROM	pg_catalog.pg_conversion fkWHERE	conowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.conowner);
SELECT	ctid, conprocFROM	pg_catalog.pg_conversion fkWHERE	conproc != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.conproc);
SELECT	ctid, datdbaFROM	pg_catalog.pg_database fkWHERE	datdba != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.datdba);
SELECT	ctid, dattablespaceFROM	pg_catalog.pg_database fkWHERE	dattablespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_tablespace pk WHERE pk.oid = fk.dattablespace);
SELECT	ctid, setdatabaseFROM	pg_catalog.pg_db_role_setting fkWHERE	setdatabase != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_database pk WHERE pk.oid = fk.setdatabase);
SELECT	ctid, classidFROM	pg_catalog.pg_depend fkWHERE	classid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.classid);
SELECT	ctid, refclassidFROM	pg_catalog.pg_depend fkWHERE	refclassid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.refclassid);
SELECT	ctid, classoidFROM	pg_catalog.pg_description fkWHERE	classoid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.classoid);
SELECT	ctid, enumtypidFROM	pg_catalog.pg_enum fkWHERE	enumtypid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.enumtypid);
SELECT	ctid, extownerFROM	pg_catalog.pg_extension fkWHERE	extowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.extowner);
SELECT	ctid, extnamespaceFROM	pg_catalog.pg_extension fkWHERE	extnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.extnamespace);
SELECT	ctid, fdwownerFROM	pg_catalog.pg_foreign_data_wrapper fkWHERE	fdwowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.fdwowner);
SELECT	ctid, srvownerFROM	pg_catalog.pg_foreign_server fkWHERE	srvowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.srvowner);
SELECT	ctid, srvfdwFROM	pg_catalog.pg_foreign_server fkWHERE	srvfdw != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_foreign_data_wrapper pk WHERE pk.oid = fk.srvfdw);
SELECT	ctid, indexrelidFROM	pg_catalog.pg_index fkWHERE	indexrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.indexrelid);
SELECT	ctid, indrelidFROM	pg_catalog.pg_index fkWHERE	indrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.indrelid);
SELECT	ctid, inhrelidFROM	pg_catalog.pg_inherits fkWHERE	inhrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.inhrelid);
SELECT	ctid, inhparentFROM	pg_catalog.pg_inherits fkWHERE	inhparent != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.inhparent);
SELECT	ctid, classoidFROM	pg_catalog.pg_init_privs fkWHERE	classoid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.classoid);
SELECT	ctid, lanownerFROM	pg_catalog.pg_language fkWHERE	lanowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.lanowner);
SELECT	ctid, lanplcallfoidFROM	pg_catalog.pg_language fkWHERE	lanplcallfoid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.lanplcallfoid);
SELECT	ctid, laninlineFROM	pg_catalog.pg_language fkWHERE	laninline != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.laninline);
SELECT	ctid, lanvalidatorFROM	pg_catalog.pg_language fkWHERE	lanvalidator != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.lanvalidator);
SELECT	ctid, loidFROM	pg_catalog.pg_largeobject fkWHERE	loid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_largeobject_metadata pk WHERE pk.oid = fk.loid);
SELECT	ctid, lomownerFROM	pg_catalog.pg_largeobject_metadata fkWHERE	lomowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.lomowner);
SELECT	ctid, nspownerFROM	pg_catalog.pg_namespace fkWHERE	nspowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.nspowner);
SELECT	ctid, opcmethodFROM	pg_catalog.pg_opclass fkWHERE	opcmethod != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_am pk WHERE pk.oid = fk.opcmethod);
SELECT	ctid, opcnamespaceFROM	pg_catalog.pg_opclass fkWHERE	opcnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.opcnamespace);
SELECT	ctid, opcownerFROM	pg_catalog.pg_opclass fkWHERE	opcowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.opcowner);
SELECT	ctid, opcfamilyFROM	pg_catalog.pg_opclass fkWHERE	opcfamily != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_opfamily pk WHERE pk.oid = fk.opcfamily);
SELECT	ctid, opcintypeFROM	pg_catalog.pg_opclass fkWHERE	opcintype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.opcintype);
SELECT	ctid, opckeytypeFROM	pg_catalog.pg_opclass fkWHERE	opckeytype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.opckeytype);
SELECT	ctid, oprnamespaceFROM	pg_catalog.pg_operator fkWHERE	oprnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.oprnamespace);
SELECT	ctid, oprownerFROM	pg_catalog.pg_operator fkWHERE	oprowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.oprowner);
SELECT	ctid, oprleftFROM	pg_catalog.pg_operator fkWHERE	oprleft != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.oprleft);
SELECT	ctid, oprrightFROM	pg_catalog.pg_operator fkWHERE	oprright != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.oprright);
SELECT	ctid, oprresultFROM	pg_catalog.pg_operator fkWHERE	oprresult != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.oprresult);
SELECT	ctid, oprcomFROM	pg_catalog.pg_operator fkWHERE	oprcom != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.oprcom);
SELECT	ctid, oprnegateFROM	pg_catalog.pg_operator fkWHERE	oprnegate != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.oprnegate);
SELECT	ctid, oprcodeFROM	pg_catalog.pg_operator fkWHERE	oprcode != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.oprcode);
SELECT	ctid, oprrestFROM	pg_catalog.pg_operator fkWHERE	oprrest != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.oprrest);
SELECT	ctid, oprjoinFROM	pg_catalog.pg_operator fkWHERE	oprjoin != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.oprjoin);
SELECT	ctid, opfmethodFROM	pg_catalog.pg_opfamily fkWHERE	opfmethod != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_am pk WHERE pk.oid = fk.opfmethod);
SELECT	ctid, opfnamespaceFROM	pg_catalog.pg_opfamily fkWHERE	opfnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.opfnamespace);
SELECT	ctid, opfownerFROM	pg_catalog.pg_opfamily fkWHERE	opfowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.opfowner);
SELECT	ctid, partrelidFROM	pg_catalog.pg_partitioned_table fkWHERE	partrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.partrelid);
SELECT	ctid, partdefidFROM	pg_catalog.pg_partitioned_table fkWHERE	partdefid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.partdefid);
SELECT	ctid, polrelidFROM	pg_catalog.pg_policy fkWHERE	polrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.polrelid);
SELECT	ctid, pronamespaceFROM	pg_catalog.pg_proc fkWHERE	pronamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.pronamespace);
SELECT	ctid, proownerFROM	pg_catalog.pg_proc fkWHERE	proowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.proowner);
SELECT	ctid, prolangFROM	pg_catalog.pg_proc fkWHERE	prolang != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_language pk WHERE pk.oid = fk.prolang);
SELECT	ctid, provariadicFROM	pg_catalog.pg_proc fkWHERE	provariadic != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.provariadic);
SELECT	ctid, prosupportFROM	pg_catalog.pg_proc fkWHERE	prosupport != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.prosupport);
SELECT	ctid, prorettypeFROM	pg_catalog.pg_proc fkWHERE	prorettype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.prorettype);
SELECT	ctid, rngtypidFROM	pg_catalog.pg_range fkWHERE	rngtypid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.rngtypid);
SELECT	ctid, rngsubtypeFROM	pg_catalog.pg_range fkWHERE	rngsubtype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.rngsubtype);
SELECT	ctid, rngcollationFROM	pg_catalog.pg_range fkWHERE	rngcollation != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.rngcollation);
SELECT	ctid, rngsubopcFROM	pg_catalog.pg_range fkWHERE	rngsubopc != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_opclass pk WHERE pk.oid = fk.rngsubopc);
SELECT	ctid, rngcanonicalFROM	pg_catalog.pg_range fkWHERE	rngcanonical != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.rngcanonical);
SELECT	ctid, rngsubdiffFROM	pg_catalog.pg_range fkWHERE	rngsubdiff != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.rngsubdiff);
SELECT	ctid, ev_classFROM	pg_catalog.pg_rewrite fkWHERE	ev_class != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.ev_class);
SELECT	ctid, seqrelidFROM	pg_catalog.pg_sequence fkWHERE	seqrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.seqrelid);
SELECT	ctid, seqtypidFROM	pg_catalog.pg_sequence fkWHERE	seqtypid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.seqtypid);
SELECT	ctid, refclassidFROM	pg_catalog.pg_shdepend fkWHERE	refclassid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.refclassid);
SELECT	ctid, classoidFROM	pg_catalog.pg_shdescription fkWHERE	classoid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.classoid);
SELECT	ctid, starelidFROM	pg_catalog.pg_statistic fkWHERE	starelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.starelid);
SELECT	ctid, staop1FROM	pg_catalog.pg_statistic fkWHERE	staop1 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.staop1);
SELECT	ctid, staop2FROM	pg_catalog.pg_statistic fkWHERE	staop2 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.staop2);
SELECT	ctid, staop3FROM	pg_catalog.pg_statistic fkWHERE	staop3 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.staop3);
SELECT	ctid, staop4FROM	pg_catalog.pg_statistic fkWHERE	staop4 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.staop4);
SELECT	ctid, staop5FROM	pg_catalog.pg_statistic fkWHERE	staop5 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.staop5);
SELECT	ctid, stacoll1FROM	pg_catalog.pg_statistic fkWHERE	stacoll1 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.stacoll1);
SELECT	ctid, stacoll2FROM	pg_catalog.pg_statistic fkWHERE	stacoll2 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.stacoll2);
SELECT	ctid, stacoll3FROM	pg_catalog.pg_statistic fkWHERE	stacoll3 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.stacoll3);
SELECT	ctid, stacoll4FROM	pg_catalog.pg_statistic fkWHERE	stacoll4 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.stacoll4);
SELECT	ctid, stacoll5FROM	pg_catalog.pg_statistic fkWHERE	stacoll5 != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.stacoll5);
SELECT	ctid, stxrelidFROM	pg_catalog.pg_statistic_ext fkWHERE	stxrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.stxrelid);
SELECT	ctid, stxnamespaceFROM	pg_catalog.pg_statistic_ext fkWHERE	stxnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.stxnamespace);
SELECT	ctid, stxownerFROM	pg_catalog.pg_statistic_ext fkWHERE	stxowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.stxowner);
SELECT	ctid, stxoidFROM	pg_catalog.pg_statistic_ext_data fkWHERE	stxoid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_statistic_ext pk WHERE pk.oid = fk.stxoid);
SELECT	ctid, spcownerFROM	pg_catalog.pg_tablespace fkWHERE	spcowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.spcowner);
SELECT	ctid, trftypeFROM	pg_catalog.pg_transform fkWHERE	trftype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.trftype);
SELECT	ctid, trflangFROM	pg_catalog.pg_transform fkWHERE	trflang != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_language pk WHERE pk.oid = fk.trflang);
SELECT	ctid, trffromsqlFROM	pg_catalog.pg_transform fkWHERE	trffromsql != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.trffromsql);
SELECT	ctid, trftosqlFROM	pg_catalog.pg_transform fkWHERE	trftosql != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.trftosql);
SELECT	ctid, tgrelidFROM	pg_catalog.pg_trigger fkWHERE	tgrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.tgrelid);
SELECT	ctid, tgparentidFROM	pg_catalog.pg_trigger fkWHERE	tgparentid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_trigger pk WHERE pk.oid = fk.tgparentid);
SELECT	ctid, tgfoidFROM	pg_catalog.pg_trigger fkWHERE	tgfoid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.tgfoid);
SELECT	ctid, tgconstrrelidFROM	pg_catalog.pg_trigger fkWHERE	tgconstrrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.tgconstrrelid);
SELECT	ctid, tgconstrindidFROM	pg_catalog.pg_trigger fkWHERE	tgconstrindid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.tgconstrindid);
SELECT	ctid, tgconstraintFROM	pg_catalog.pg_trigger fkWHERE	tgconstraint != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint pk WHERE pk.oid = fk.tgconstraint);
SELECT	ctid, cfgnamespaceFROM	pg_catalog.pg_ts_config fkWHERE	cfgnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.cfgnamespace);
SELECT	ctid, cfgownerFROM	pg_catalog.pg_ts_config fkWHERE	cfgowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.cfgowner);
SELECT	ctid, cfgparserFROM	pg_catalog.pg_ts_config fkWHERE	cfgparser != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_ts_parser pk WHERE pk.oid = fk.cfgparser);
SELECT	ctid, mapcfgFROM	pg_catalog.pg_ts_config_map fkWHERE	mapcfg != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_ts_config pk WHERE pk.oid = fk.mapcfg);
SELECT	ctid, mapdictFROM	pg_catalog.pg_ts_config_map fkWHERE	mapdict != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_ts_dict pk WHERE pk.oid = fk.mapdict);
SELECT	ctid, dictnamespaceFROM	pg_catalog.pg_ts_dict fkWHERE	dictnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.dictnamespace);
SELECT	ctid, dictownerFROM	pg_catalog.pg_ts_dict fkWHERE	dictowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.dictowner);
SELECT	ctid, dicttemplateFROM	pg_catalog.pg_ts_dict fkWHERE	dicttemplate != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_ts_template pk WHERE pk.oid = fk.dicttemplate);
SELECT	ctid, prsnamespaceFROM	pg_catalog.pg_ts_parser fkWHERE	prsnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.prsnamespace);
SELECT	ctid, prsstartFROM	pg_catalog.pg_ts_parser fkWHERE	prsstart != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.prsstart);
SELECT	ctid, prstokenFROM	pg_catalog.pg_ts_parser fkWHERE	prstoken != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.prstoken);
SELECT	ctid, prsendFROM	pg_catalog.pg_ts_parser fkWHERE	prsend != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.prsend);
SELECT	ctid, prsheadlineFROM	pg_catalog.pg_ts_parser fkWHERE	prsheadline != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.prsheadline);
SELECT	ctid, prslextypeFROM	pg_catalog.pg_ts_parser fkWHERE	prslextype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.prslextype);
SELECT	ctid, tmplnamespaceFROM	pg_catalog.pg_ts_template fkWHERE	tmplnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.tmplnamespace);
SELECT	ctid, tmplinitFROM	pg_catalog.pg_ts_template fkWHERE	tmplinit != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.tmplinit);
SELECT	ctid, tmpllexizeFROM	pg_catalog.pg_ts_template fkWHERE	tmpllexize != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.tmpllexize);
SELECT	ctid, typnamespaceFROM	pg_catalog.pg_type fkWHERE	typnamespace != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_namespace pk WHERE pk.oid = fk.typnamespace);
SELECT	ctid, typownerFROM	pg_catalog.pg_type fkWHERE	typowner != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_authid pk WHERE pk.oid = fk.typowner);
SELECT	ctid, typrelidFROM	pg_catalog.pg_type fkWHERE	typrelid != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_class pk WHERE pk.oid = fk.typrelid);
SELECT	ctid, typelemFROM	pg_catalog.pg_type fkWHERE	typelem != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.typelem);
SELECT	ctid, typarrayFROM	pg_catalog.pg_type fkWHERE	typarray != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.typarray);
SELECT	ctid, typinputFROM	pg_catalog.pg_type fkWHERE	typinput != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.typinput);
SELECT	ctid, typoutputFROM	pg_catalog.pg_type fkWHERE	typoutput != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.typoutput);
SELECT	ctid, typreceiveFROM	pg_catalog.pg_type fkWHERE	typreceive != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.typreceive);
SELECT	ctid, typsendFROM	pg_catalog.pg_type fkWHERE	typsend != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.typsend);
SELECT	ctid, typmodinFROM	pg_catalog.pg_type fkWHERE	typmodin != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.typmodin);
SELECT	ctid, typmodoutFROM	pg_catalog.pg_type fkWHERE	typmodout != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.typmodout);
SELECT	ctid, typanalyzeFROM	pg_catalog.pg_type fkWHERE	typanalyze != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_proc pk WHERE pk.oid = fk.typanalyze);
SELECT	ctid, typbasetypeFROM	pg_catalog.pg_type fkWHERE	typbasetype != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.typbasetype);
SELECT	ctid, typcollationFROM	pg_catalog.pg_type fkWHERE	typcollation != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.typcollation);
SELECT	ctid, conpfeqopFROM	(SELECT ctid, unnest(conpfeqop) AS conpfeqop FROM pg_catalog.pg_constraint) fkWHERE	conpfeqop != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.conpfeqop);
SELECT	ctid, conppeqopFROM	(SELECT ctid, unnest(conppeqop) AS conppeqop FROM pg_catalog.pg_constraint) fkWHERE	conppeqop != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.conppeqop);
SELECT	ctid, conffeqopFROM	(SELECT ctid, unnest(conffeqop) AS conffeqop FROM pg_catalog.pg_constraint) fkWHERE	conffeqop != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.conffeqop);
SELECT	ctid, conexclopFROM	(SELECT ctid, unnest(conexclop) AS conexclop FROM pg_catalog.pg_constraint) fkWHERE	conexclop != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_operator pk WHERE pk.oid = fk.conexclop);
SELECT	ctid, indcollationFROM	(SELECT ctid, unnest(indcollation) AS indcollation FROM pg_catalog.pg_index) fkWHERE	indcollation != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.indcollation);
SELECT	ctid, indclassFROM	(SELECT ctid, unnest(indclass) AS indclass FROM pg_catalog.pg_index) fkWHERE	indclass != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_opclass pk WHERE pk.oid = fk.indclass);
SELECT	ctid, partclassFROM	(SELECT ctid, unnest(partclass) AS partclass FROM pg_catalog.pg_partitioned_table) fkWHERE	partclass != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_opclass pk WHERE pk.oid = fk.partclass);
SELECT	ctid, partcollationFROM	(SELECT ctid, unnest(partcollation) AS partcollation FROM pg_catalog.pg_partitioned_table) fkWHERE	partcollation != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_collation pk WHERE pk.oid = fk.partcollation);
SELECT	ctid, proargtypesFROM	(SELECT ctid, unnest(proargtypes) AS proargtypes FROM pg_catalog.pg_proc) fkWHERE	proargtypes != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.proargtypes);
SELECT	ctid, proallargtypesFROM	(SELECT ctid, unnest(proallargtypes) AS proallargtypes FROM pg_catalog.pg_proc) fkWHERE	proallargtypes != 0 AND	NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type pk WHERE pk.oid = fk.proallargtypes);
