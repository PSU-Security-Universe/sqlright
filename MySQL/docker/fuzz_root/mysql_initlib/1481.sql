CREATE FUNCTION GTID_IS_EQUAL(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS INT RETURN GTID_SUBSET(gtid_set_1, gtid_set_2) AND GTID_SUBSET(gtid_set_2, gtid_set_1);
CREATE FUNCTION GTID_IS_DISJOINT(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS INT RETURN GTID_SUBSET(gtid_set_1, GTID_SUBTRACT(gtid_set_1, gtid_set_2));
CREATE FUNCTION GTID_IS_DISJOINT_UNION(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT, sum LONGTEXT) RETURNS INT RETURN GTID_IS_EQUAL(GTID_SUBTRACT(sum, gtid_set_1), gtid_set_2) AND GTID_IS_EQUAL(GTID_SUBTRACT(sum, gtid_set_2), gtid_set_1);
CREATE FUNCTION GTID_NORMALIZE(g LONGTEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(g, '');
CREATE FUNCTION GTID_UNION(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS LONGTEXT RETURN GTID_NORMALIZE(CONCAT(gtid_set_1, ',', gtid_set_2));
CREATE FUNCTION GTID_INTERSECTION(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(gtid_set_1, GTID_SUBTRACT(gtid_set_1, gtid_set_2));
CREATE FUNCTION GTID_SYMMETRIC_DIFFERENCE(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(CONCAT(gtid_set_1, ',', gtid_set_2), GTID_INTERSECTION(gtid_set_1, gtid_set_2));
CREATE FUNCTION GTID_SUBTRACT_UUID(gtid_set LONGTEXT, uuid TEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(gtid_set, CONCAT(UUID, ':1-', (1 << 63) - 2));
CREATE FUNCTION GTID_INTERSECTION_WITH_UUID(gtid_set LONGTEXT, uuid TEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(gtid_set, GTID_SUBTRACT_UUID(gtid_set, uuid));
CREATE FUNCTION IFZERO(a INT, b INT) RETURNS INT RETURN IF(a = 0, b, a);
CREATE FUNCTION LOCATE2(needle LONGTEXT, haystack LONGTEXT, offset INT) RETURNS INT RETURN IFZERO(LOCATE(needle, haystack, offset), LENGTH(haystack) + 1);
CREATE FUNCTION GTID_FROM_GTID_SET(gtid_set LONGTEXT) RETURNS LONGTEXT BEGIN DECLARE normalized LONGTEXT DEFAULT GTID_NORMALIZE(gtid_set); DECLARE end_of_number INT DEFAULT LEAST(LOCATE2('-', normalized, 38), LOCATE2(':', normalized, 38), LOCATE2(',', normalized, 38)); RETURN SUBSTR(normalized, 1, end_of_number - 1); END;
CREATE FUNCTION GTID_NEXT_GENERATED_MULTIPLE(gtid_set LONGTEXT, uuid TEXT, count INT) RETURNS LONGTEXT BEGIN DECLARE result LONGTEXT DEFAULT ''; DECLARE number INT; DECLARE new_gtid LONGTEXT; WHILE count > 0 DO SET new_gtid = CONCAT(uuid, ':', GTID_NEXT_GENERATED(gtid_set, uuid)); SET result = GTID_UNION(result, new_gtid); SET gtid_set = GTID_UNION(gtid_set, new_gtid); SET count = count - 1; END WHILE; RETURN result; END;
CREATE FUNCTION GTID_COMPARE(old LONGTEXT, diff LONGTEXT, new LONGTEXT) RETURNS LONGTEXT RETURN IF(SUBSTR(diff, 1, 1) != '~', GTID_IS_DISJOINT_UNION(old, GTID_NEXT_GENERATED_SET(old, diff), new), GTID_IS_DISJOINT_UNION(new, GTID_NEXT_GENERATED_SET(old, SUBSTR(diff, 2)), old));
CREATE FUNCTION GTID_EXECUTED_FROM_TABLE() RETURNS LONGTEXT BEGIN DECLARE old_group_concat_max_len INT DEFAULT @@SESSION.GROUP_CONCAT_MAX_LEN; DECLARE tmp LONGTEXT; SET @@SESSION.GROUP_CONCAT_MAX_LEN = 100000; SELECT GROUP_CONCAT(CONCAT(source_uuid, ':', interval_start, '-', interval_end) SEPARATOR ',') FROM mysql.gtid_executed INTO tmp; SET @@SESSION.GROUP_CONCAT_MAX_LEN = old_group_concat_max_len; RETURN GTID_NORMALIZE(tmp); END;
CREATE VIEW v_processlist  as SELECT * FROM performance_schema.threads where type = 'FOREGROUND';
CREATE TABLE t (a INT) ENGINE=innodb;
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx1tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx1tmp';
XA PREPARE 'trx1tmp';
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx2tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx2tmp';
XA PREPARE 'trx2tmp';
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx3tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx3tmp';
XA PREPARE 'trx3tmp';
XA COMMIT 'trx1tmp';
XA ROLLBACK 'trx1tmp';
XA START 'trx1tmp';
XA RECOVER;
XA COMMIT 'trx1tmp';
KILL connection 17;
XA COMMIT 'trx3tmp';
XA START   'trx1ro1';
SELECT * from t ORDER BY a;
XA END     'trx1ro1';
XA PREPARE 'trx1ro1';
XA START   'trx2ro1';
SELECT * from t ORDER BY a;
XA END     'trx2ro1';
XA PREPARE 'trx2ro1';
XA START   'trx3ro1';
SELECT * from t ORDER BY a;
XA END     'trx3ro1';
XA PREPARE 'trx3ro1';
XA RECOVER;
XA COMMIT 'trx1ro1';
KILL connection 20;
XA COMMIT 'trx3ro1';
XA START   'trx1ro2';
SELECT * from t ORDER BY a;
XA END     'trx1ro2';
XA PREPARE 'trx1ro2';
XA START   'trx2ro2';
SELECT * from t ORDER BY a;
XA END     'trx2ro2';
XA PREPARE 'trx2ro2';
XA START   'trx3ro2';
SELECT * from t ORDER BY a;
XA END     'trx3ro2';
XA PREPARE 'trx3ro2';
XA RECOVER;
XA ROLLBACK 'trx1ro2';
KILL connection 23;
XA ROLLBACK 'trx3ro2';
XA START   'trx1empty1';
XA END     'trx1empty1';
XA PREPARE 'trx1empty1';
XA START   'trx2empty1';
XA END     'trx2empty1';
XA PREPARE 'trx2empty1';
XA START   'trx3empty1';
XA END     'trx3empty1';
XA PREPARE 'trx3empty1';
XA RECOVER;
XA COMMIT 'trx1empty1';
KILL connection 26;
XA COMMIT 'trx3empty1';
XA START   'trx1empty2';
XA END     'trx1empty2';
XA PREPARE 'trx1empty2';
XA START   'trx2empty2';
XA END     'trx2empty2';
XA PREPARE 'trx2empty2';
XA START   'trx3empty2';
XA END     'trx3empty2';
XA PREPARE 'trx3empty2';
XA RECOVER;
XA ROLLBACK 'trx1empty2';
KILL connection 29;
XA ROLLBACK 'trx3empty2';
XA START   'trx1unprepared';
INSERT INTO t set a=0;
XA END     'trx1unprepared';
INSERT INTO t set a=0;
XA START 'trx1unprepared';
XA START 'trx1unprepared';
XA COMMIT 'trx1unprepared';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_0';
INSERT INTO t SET a=0;
XA END     'trx_0';
XA PREPARE 'trx_0';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_1';
INSERT INTO t SET a=1;
XA END     'trx_1';
XA PREPARE 'trx_1';
