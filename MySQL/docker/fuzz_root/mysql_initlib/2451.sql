CREATE TABLE t1 (int_col INTEGER, string_col VARCHAR(255));
INSERT INTO t1 (int_col, string_col) VALUES (-1, "foo"), (1, "bar");
CREATE INDEX int_func_index ON t1 ((ABS(int_col)));
CREATE INDEX string_func_index ON t1 ((SUBSTRING(string_col, 1, 2)));
ANALYZE TABLE t1;
SHOW CREATE TABLE t1;
SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE INDEX_NAME IN ('int_func_index', 'string_func_index');
SELECT COUNT(*) AS should_be_2 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = "t1";
SELECT COUNT(*) AS should_be_2 FROM INFORMATION_SCHEMA.INNODB_COLUMNS c JOIN INFORMATION_SCHEMA.INNODB_TABLES t ON (c.TABLE_ID = t.TABLE_ID) WHERE t.NAME = "test/t1";
EXPLAIN SELECT * FROM t1 WHERE SUBSTRING(string_col, 1, 2) = "fo";
EXPLAIN SELECT * FROM t1 WHERE ABS(int_col) = 1;
CREATE TABLE t2 ( col1 INT, INDEX ((col1 * 2)), INDEX ((col1 * 4)), INDEX ((col1 * 6)));
SHOW CREATE TABLE t2;
DROP TABLE t2;
CREATE INDEX combined_index ON t1 ((int_col + int_col), string_col);
SHOW CREATE TABLE t1;
EXPLAIN SELECT * FROM t1 WHERE int_col + int_col = 2 AND string_col = "bar";
ALTER TABLE t1 ADD COLUMN rand VARCHAR(255);
CREATE INDEX name_collision ON t1 ((rand(2)));
CREATE INDEX name_collision ON t1 ((`rand`(2)));
DROP TABLE t1;
CREATE TABLE t1 (f1 JSON, f2 VARCHAR(255));
CREATE INDEX my_functional_index ON t1 ((CAST(f1 AS DECIMAL(2, 1))));
CREATE INDEX my_functional_index_2 ON t1 ((CAST(f2 AS CHAR(1))));
CREATE INDEX idx1 ON t1 ((CAST(f2 AS JSON)));
INSERT INTO t1 (f1) VALUES (CAST(1000 AS JSON));
INSERT INTO t1 (f2) VALUES ("lorem ipsum");
SET @@sql_mode='';
INSERT INTO t1 (f1) VALUES (CAST(1000 AS JSON));
INSERT INTO t1 (f2) VALUES ("lorem ipsum");
DROP TABLE t1;
SET @@sql_mode=DEFAULT;
CREATE TABLE t1 (t1_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
CREATE INDEX idx1 ON t1 ((t1_id + t1_id));
DROP TABLE t1;
CREATE TABLE t1 (col1 INT, col2 INT);
CREATE INDEX idx1 ON t1 (col1, (col1 + col2));
SHOW KEYS FROM t1;
CREATE INDEX idx2 ON t1 ((col1 + 1), (col1 + 2), (col1 + 3), (col1 + 4), (col1 + 5));
ALTER TABLE t1 ADD COLUMN `!hidden!idx1!1!0` INT NOT NULL;
ALTER TABLE t1 ADD COLUMN `!hidden!idx3!0!0` INT NOT NULL;
CREATE INDEX idx3 ON t1 ((col1-col2));
ALTER TABLE t1 ADD COLUMN `!hidden!idx3!0!1` INT NOT NULL;
DROP TABLE t1;
CREATE TABLE t1 (col1 INT, col2 INT);
ALTER TABLE t1 ADD INDEX ((ABS(col1))), ADD INDEX ((ABS(col2)));
SHOW CREATE TABLE t1;
ALTER TABLE t1 ADD COLUMN col3 INT, ADD INDEX ((col1 - col3));
DROP TABLE t1;
CREATE TABLE t1 (col1 INT, INDEX ((ABS(col1))));
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(a INT);
CREATE INDEX idx ON t1 ((ABS(a)));
SHOW KEYS FROM t1;
DROP TABLE t1;
CREATE TABLE t1 (col1 INT, INDEX ((CONCAT(''))));
CREATE TABLE t1 (col1 INT, PRIMARY KEY ((ABS(col1))));
CREATE TABLE t1 (col1 INT, PRIMARY KEY (col1, (ABS(col1))));
CREATE TABLE t1 (col1 INT, col2 INT, PRIMARY KEY (col1, (ABS(col1)), col2));
CREATE TABLE t1 (col1 INT, col2 INT);
ALTER TABLE t1 ADD PRIMARY KEY ((ABS(col1)));
ALTER TABLE t1 ADD PRIMARY KEY (col2, (ABS(col1)));
ALTER TABLE t1 ADD PRIMARY KEY (col1, col2, (ABS(col1)));
DROP TABLE t1;
CREATE TABLE t1 (col1 INT, INDEX ((ABS(col1)) DESC));
EXPLAIN SELECT col1 FROM t1 WHERE ABS(col1) < 1 ORDER BY ABS(col1) DESC;
DROP TABLE t1;
CREATE TABLE t1(f1 JSON, INDEX idx1 ((CAST(f1->"$.id" AS UNSIGNED))));
INSERT INTO t1 VALUES(CAST('{"id":1}' AS JSON)), (CAST('{"id":2}' AS JSON)), (CAST('{"id":3}' AS JSON)), (CAST('{"id":4}' AS JSON)), (CAST('{"id":5}' AS JSON)), (CAST('{"id":6}' AS JSON)), (CAST('{"id":7}' AS JSON)), (CAST('{"id":8}' AS JSON)), (CAST('{"id":9}' AS JSON)), (CAST('{"id":10}' AS JSON));
ANALYZE TABLE t1;
SELECT * FROM t1 WHERE f1->"$.id"= 5;
EXPLAIN SELECT * FROM t1 WHERE f1->"$.id"= 5;
SELECT * FROM t1 WHERE f1->"$.id" IN (1,2,3);
EXPLAIN SELECT * FROM t1 WHERE f1->"$.id" IN (1,2,3);
DROP TABLE t1;
CREATE TABLE t1(f1 JSON, INDEX idx1 ((CAST(f1->>"$.id" AS CHAR(10)))));
INSERT INTO t1 VALUES (CAST('{"id":"a"}' AS JSON)), (CAST('{"id":"b"}' AS JSON)), (CAST('{"id":"v"}' AS JSON)), (CAST('{"id":"c"}' AS JSON)), (CAST('{"id":"x"}' AS JSON)), (CAST('{"id":"\'z"}' AS JSON)),   (JSON_OBJECT("id",JSON_QUOTE("n"))), (CAST('{"id":"w"}' AS JSON)),   (CAST('{"id":"m"}' AS JSON)), (CAST('{"id":"q"}' AS JSON));
ANALYZE TABLE t1;
SELECT * FROM t1 WHERE CAST(f1->>"$.id" AS CHAR(10)) = "\"n\"";
EXPLAIN SELECT * FROM t1 WHERE CAST(f1->>"$.id" AS CHAR(10)) = "\"n\"";
SELECT * FROM t1 WHERE CAST(f1->>"$.id" AS CHAR(10)) IN ("'z", "\"n\"","a");
EXPLAIN SELECT * FROM t1 WHERE CAST(f1->>"$.id" AS CHAR(10)) IN ("'z", "\"n\"","a");
DROP TABLE t1;
CREATE TABLE t1(f1 JSON, INDEX idx1 ((CAST(f1->>"$.name" AS CHAR(30)) COLLATE utf8mb4_bin)));
INSERT INTO t1 VALUES ('{"name": "james"}'), ('{"name": "JAMES"}'), ('{"name": "Peter"}'), ('{"name": "parker"}');
ANALYZE TABLE t1;
SELECT * FROM t1 WHERE f1->>"$.name" = "James";
EXPLAIN SELECT * FROM t1 WHERE f1->>"$.name" = "James";
SELECT * FROM t1 WHERE f1->>"$.name" = "james";
EXPLAIN SELECT * FROM t1 WHERE f1->>"$.name" = "james";
SELECT * FROM t1 WHERE CAST(f1->>"$.name" AS CHAR(30)) COLLATE utf8mb4_bin = "james";
EXPLAIN SELECT * FROM t1 WHERE CAST(f1->>"$.name" AS CHAR(30)) COLLATE utf8mb4_bin = "james";
DROP TABLE t1;
CREATE TABLE t1 (col1 INT, INDEX idx1 ((col1 + col1)));
UPDATE t1 SET `!hidden!idx1!0!0` = 123;
DROP TABLE t1;
CREATE TABLE t3 (c1 INT);
CREATE INDEX int_func_index ON t3 ((ABS(c1)));
SELECT * FROM t3 WHERE `!hidden!int_func_index!0!0`=1;
DROP TABLE t3;
CREATE TABLE t6 (c1 INT, c2 INT);
CREATE INDEX int_func_index ON t6 ((ABS(c1)));
ALTER TABLE t6 DROP COLUMN c2;
DROP TABLE t6;
CREATE TABLE t1(x VARCHAR(100), KEY ((ST_GeomFromText(x))));
CREATE TABLE t1(x VARCHAR(30), INDEX idx ((CAST(x->>'$.name' AS CHAR(30)))));
INSERT INTO t1 VALUES ('{"name":"knut"}');
ANALYZE TABLE t1;
EXPLAIN FORMAT=JSON SELECT * FROM t1 WHERE CAST(x->>'$.name' AS CHAR(30)) = 'knut';
DROP TABLE t1;
CREATE TABLE t(x INT, KEY((1+1)));
ALTER TABLE t DROP COLUMN x;
DROP TABLE t;
CREATE TABLE t (x INT);
CREATE INDEX idx ON t ((x+1));
CREATE INDEX idx ON t ((x+2));
DROP TABLE t;
CREATE TABLE t2(a INT, b INT, INDEX id2 ((a)));
CREATE TABLE t2(a INT, b INT, INDEX id2 ((a+b+c)));
CREATE TABLE IF NOT EXISTS table470 ( pk INTEGER AUTO_INCREMENT, a1 VARCHAR(3) NOT NULL, b1 DATETIME NOT NULL, c1 TEXT NOT NULL, d1 TEXT NULL, PRIMARY KEY (a1), KEY ((VALUES(d1))));
CREATE TABLE  table44 ( pk INTEGER AUTO_INCREMENT, a1 TEXT NOT NULL, b1 DATETIME NOT NULL, c1 TIME NOT NULL, d1 BLOB NOT NULL, PRIMARY KEY (a1), KEY ((VALUES(d1))));
CREATE INDEX ind320 ON t1 ((pk >= col_time_nokey LIKE ST_GeomFromGeoJSON(col_varchar_key) ));
