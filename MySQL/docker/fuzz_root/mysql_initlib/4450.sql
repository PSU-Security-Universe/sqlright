SET optimizer_switch='subquery_to_derived=on';
CREATE TABLE t1(a INT);
CREATE TABLE t2(a INT);
INSERT INTO t1 VALUES (1),(2),(3),(4);
INSERT INTO t2 VALUES (1),(2);
CREATE TABLE t0 AS SELECT * FROM t1;
CREATE TABLE t3(a INT, b INT);
INSERT INTO t3 VALUES (1,3), (2,3);
ANALYZE TABLE t1, t2, t0, t3;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
SELECT t1.* FROM t1 LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
explain SELECT t1.* FROM t1 LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
SELECT t0.*, t1.* FROM t0 LEFT OUTER JOIN t1 ON t0.a != t1.a WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT t0.*, t1.* FROM t0 LEFT OUTER JOIN t1 ON t0.a != t1.a WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
SELECT * FROM t0 LEFT OUTER JOIN t1 on t0.a = t1.a WHERE t0.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT * FROM t0 LEFT OUTER JOIN t1 on t0.a = t1.a WHERE t0.a > (SELECT COUNT(a) AS cnt FROM t2);
SELECT t0.*, t1.* FROM (t0 LEFT OUTER JOIN t1 ON t0.a != t1.a) LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
explain SELECT t0.*, t1.* FROM (t0 LEFT OUTER JOIN t1 ON t0.a != t1.a) LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) OR t1.a = 2;
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) OR t1.a = 2;
SELECT t1.* FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) AND t1.a < (SELECT MAX(a) * 4 AS mx FROM t2);
explain SELECT t1.* FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) AND t1.a < (SELECT MAX(a) * 4 AS mx FROM t2);
SELECT t1.* FROM t1 LEFT JOIN (SELECT COUNT(a) AS cnt FROM t2) AS lj1 ON TRUE LEFT JOIN (SELECT MAX(a) * 4 AS mx FROM t2) AS lj2 ON TRUE WHERE t1.a > cnt AND t1.a < mx;
explain SELECT t1.* FROM t1 LEFT JOIN (SELECT COUNT(a) AS cnt FROM t2) AS lj1 ON TRUE LEFT JOIN (SELECT MAX(a) * 4 AS mx FROM t2) AS lj2 ON TRUE WHERE t1.a > cnt AND t1.a < mx;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3 GROUP BY a);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3 GROUP BY a);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1);
SELECT * FROM t1 WHERE t1.a > (SELECT a from t1 WHERE false);
explain SELECT * FROM t1 WHERE t1.a > (SELECT a from t1 WHERE false);
SELECT a + (SELECT a from t1 WHERE false) FROM t1;
explain SELECT a + (SELECT a from t1 WHERE false) FROM t1;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 1);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 0);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 0);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 0);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 0);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 1);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION (SELECT 1 LIMIT 1));
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION (SELECT 1 LIMIT 1));
SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2 LIMIT 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2 LIMIT 1);
SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2);
explain SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2);
EXPLAIN SELECT (SELECT SUM(a) + (SELECT SUM(t1.a) FROM t1) + SUM(t3.a) FROM t2) FROM t3;
EXPLAIN SELECT SUM(a), (SELECT SUM(b) FROM t3) scalar FROM t1 HAVING SUM(a) > scalar;
EXPLAIN SELECT t1.a + (@foo:=3) FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT DISTINCT 3 + (SELECT COUNT(a) + RAND() FROM t1) FROM t1;
SELECT COUNT(*) > 1 FROM (SELECT DISTINCT 3 + (SELECT COUNT(a) + RAND() FROM t1) FROM t1) AS dt;
SELECT t1.a, t2.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1);
explain SELECT t1.a, t2.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1);
SELECT t1.a, t2.a, t3.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1) JOIN t3 ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1) JOIN t3 ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN ( t2 JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN ( t2 JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SET optimizer_switch='subquery_to_derived=default';
SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN ( t2 JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SET optimizer_switch='subquery_to_derived=on';
SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN (SELECT MIN(a) FROM t1) derived_1 ON TRUE LEFT JOIN ( t2 LEFT JOIN (SELECT COUNT(*) FROM t1) AS derived_2 ON TRUE JOIN t3 ON t2.a = derived_2.`COUNT(*)` ) ON t1.a + derived_1.`MIN(a)` = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN (SELECT MIN(a) FROM t1) derived_1 ON TRUE LEFT JOIN ( t2 LEFT JOIN (SELECT COUNT(*) FROM t1) AS derived_2 ON TRUE JOIN t3 ON t2.a = derived_2.`COUNT(*)` ) ON t1.a + derived_1.`MIN(a)` = t3.b;
SELECT t1.a, t2.a, t3.a FROM t1 STRAIGHT_JOIN ( t2 STRAIGHT_JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 STRAIGHT_JOIN ( t2 STRAIGHT_JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SELECT a + (SELECT -SUM(a) FROM t1) AS cnt FROM t2;
explain SELECT a + (SELECT -SUM(a) FROM t1) AS cnt FROM t2;
SELECT a + derived.cnt FROM t2 LEFT OUTER JOIN (SELECT -SUM(a) AS cnt FROM t1) AS derived ON TRUE;
explain SELECT a + derived.cnt FROM t2 LEFT OUTER JOIN (SELECT -SUM(a) AS cnt FROM t1) AS derived ON TRUE;
SELECT a + (SELECT SUM(a) FROM t1) FROM t1 UNION ALL SELECT a + (SELECT SUM(a) FROM t1) FROM t1;
explain SELECT a + (SELECT SUM(a) FROM t1) FROM t1 UNION ALL SELECT a + (SELECT SUM(a) FROM t1) FROM t1;
SELECT a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM t1) AS cnt FROM t2;
explain SELECT a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM t1) AS cnt FROM t2;
SELECT (t2.a + derived_1_0.sum_plus_cnt) AS cnt FROM t2 LEFT JOIN (SELECT (derived_2_0.tmp_aggr_1 + derived_2_1.count_a) AS sum_plus_cnt FROM (SELECT STRAIGHT_JOIN SUM(t1.a) AS tmp_aggr_1 from t1) derived_2_0 LEFT JOIN (SELECT COUNT(t1.a) AS count_a from t1) derived_2_1 ON TRUE) derived_1_0 ON TRUE;
explain SELECT (t2.a + derived_1_0.sum_plus_cnt) AS cnt FROM t2 LEFT JOIN (SELECT (derived_2_0.tmp_aggr_1 + derived_2_1.count_a) AS sum_plus_cnt FROM (SELECT STRAIGHT_JOIN SUM(t1.a) AS tmp_aggr_1 from t1) derived_2_0 LEFT JOIN (SELECT COUNT(t1.a) AS count_a from t1) derived_2_1 ON TRUE) derived_1_0 ON TRUE;
SELECT a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM (SELECT * from t1) t11) AS cnt FROM t2;
SELECT AVG(a) OVER () AS `avg`, a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM (SELECT * from t1) t11) AS cnt FROM t2;
DROP TABLE t0, t1, t2, t3;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 (a) VALUES (1), (2);
CREATE TABLE t2 SELECT * FROM t1;
ANALYZE TABLE t1, t2;
SELECT (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION SELECT a+1 FROM dt WHERE a<10) SELECT t1.a * CONCAT(COUNT(*), '.', FLOOR(AVG(dt.a))) FROM dt) AS subq FROM t1;
explain SELECT (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION SELECT a+1 FROM dt WHERE a<10) SELECT t1.a * CONCAT(COUNT(*), '.', FLOOR(AVG(dt.a))) FROM dt) AS subq FROM t1;
SELECT derived0.cnct AS subq FROM t1 LEFT JOIN LATERAL (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION SELECT (dt.a + 1) FROM dt WHERE dt.a < 10) SELECT t1.a * CONCAT(COUNT(0), '.', FLOOR(AVG(dt.a))) AS cnct FROM dt) derived0 ON TRUE;
explain SELECT derived0.cnct AS subq FROM t1 LEFT JOIN LATERAL (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION SELECT (dt.a + 1) FROM dt WHERE dt.a < 10) SELECT t1.a * CONCAT(COUNT(0), '.', FLOOR(AVG(dt.a))) AS cnct FROM dt) derived0 ON TRUE;
DROP TABLE t1, t2;
CREATE TABLE t1(i INT);
CREATE TABLE t2(a INT);
CREATE TABLE t3(x INT);
ANALYZE TABLE t1, t2, t3;
EXPLAIN SELECT ( SELECT (SELECT COUNT(*) FROM t2) + (SELECT AVG(a) FROM t2 WHERE t2.a = t3.x) AS aggs FROM t1 ) AS bignest FROM t3;
EXPLAIN SELECT ( SELECT (SELECT COUNT(*) FROM t2) AS aggs FROM t1 ) AS bignest FROM t3;
DROP TABLE t1, t2, t3;
CREATE TABLE t1 (a INT NOT NULL, b SMALLINT);
INSERT INTO t1 VALUES (12,12);
ANALYZE TABLE t1;
SELECT (SELECT COUNT(*) FROM t1 WHERE a=11725) AS tot, IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE false;
explain SELECT (SELECT COUNT(*) FROM t1 WHERE a=11725) AS tot, IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE false;
SELECT (SELECT COUNT(*) FROM t1 WHERE a=11725) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE false;
explain SELECT (SELECT COUNT(*) FROM t1 WHERE a=11725) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE false;
INSERT INTO t1 VALUES (13, 12);
SELECT DISTINCT (SELECT COUNT(*) FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE a > 5 GROUP BY a;
explain SELECT DISTINCT (SELECT COUNT(*) FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 WHERE a > 5 GROUP BY a;
SELECT (SELECT COUNT(*) FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 GROUP BY a LIMIT 1;
explain SELECT (SELECT COUNT(*) FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 GROUP BY a LIMIT 1;
SELECT (SELECT (SELECT COUNT(*) FROM t1) + MAX(t1.b) + MIN(t1_outer.a) AS tot FROM t1) FROM t1 AS t1_outer;
explain SELECT (SELECT (SELECT COUNT(*) FROM t1) + MAX(t1.b) + MIN(t1_outer.a) AS tot FROM t1) FROM t1 AS t1_outer;
SELECT (SELECT COUNT(*) FROM t1) + MAX(b) + (SELECT MIN(a) + AVG(top.a) FROM t1) AS tot FROM t1 top;
explain SELECT (SELECT COUNT(*) FROM t1) + MAX(b) + (SELECT MIN(a) + AVG(top.a) FROM t1) AS tot FROM t1 top;
SELECT (SELECT COUNT(*) + `outer`.a FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 AS `outer` GROUP BY a;
explain SELECT (SELECT COUNT(*) + `outer`.a FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 AS `outer` GROUP BY a;
SELECT (SELECT COUNT(*) + derived_1.d_1 FROM t1) + IFNULL(derived_1.`MAX(b)`,0) + 1 + 5 AS mx FROM (SELECT STRAIGHT_JOIN MAX(outer_t.b) AS `MAX(b)`, outer_t.a AS d_1 FROM t1 outer_t GROUP BY outer_t.a) derived_1;
SELECT (derived_1.`COUNT(*) + outer_t.a` + IFNULL(derived_0.`MAX(b)`,0)) + 1 + 5 AS mx FROM (SELECT STRAIGHT_JOIN MAX(outer_t.b) AS `MAX(b)`, outer_t.a AS d_1 FROM t1 outer_t GROUP BY outer_t.a) derived_0 LEFT JOIN LATERAL (SELECT (COUNT(0) + derived_0.d_1) AS `COUNT(*) + outer_t.a`                         FROM t1) derived_1 ON(true) WHERE true;
SELECT (SELECT COUNT(*) + MAX(outer_t.b) FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 AS outer_t GROUP BY a;
explain SELECT (SELECT COUNT(*) + MAX(outer_t.b) FROM t1) + IFNULL(MAX(b),0)+1 + 5 AS mx FROM t1 AS outer_t GROUP BY a;
DROP TABLE t1;
CREATE VIEW events_digest AS SELECT * FROM performance_schema.events_statements_summary_by_digest;
