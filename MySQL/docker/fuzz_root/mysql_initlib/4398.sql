CREATE TABLE t1( pk INTEGER PRIMARY KEY, uk INTEGER UNIQUE, ukn INTEGER UNIQUE NOT NULL, ik INTEGER, d INTEGER, INDEX ik(ik));
INSERT INTO t1 VALUES (0, NULL, 0, NULL, NULL), (1, 10, 20, 30, 40), (2, 20, 40, 60, 80);
CREATE TABLE t2( pk INTEGER PRIMARY KEY);
INSERT INTO t2 VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9),(10), (11),(12),(13),(14),(15),(16),(17),(18),(19),(20), (21),(22),(23),(24),(25),(26),(27),(28),(29),(30), (31),(32),(33),(34),(35),(36),(37),(38),(39),(40), (41),(42),(43),(44),(45),(46),(47),(48),(49),(50), (51),(52),(53),(54),(55),(56),(57),(58),(59),(60), (61),(62),(63),(64),(65),(66),(67),(68),(69),(70), (71),(72),(73),(74),(75),(76),(77),(78),(79),(80);
ANALYZE TABLE t1, t2;
set optimizer_switch="firstmatch=on,materialization=off";
select @@optimizer_switch;
EXPLAIN SELECT 1 as a FROM dual WHERE NOT EXISTS (SELECT * FROM t1 AS it);
SELECT 1 as a FROM dual WHERE NOT EXISTS (SELECT * FROM t1 AS it);
EXPLAIN SELECT 1 as a FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it);
SELECT 1 as a FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it);
EXPLAIN SELECT pk FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it WHERE it.uk=ot.pk) AND ot.pk<25;
EXPLAIN FORMAT=JSON SELECT pk FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it WHERE it.uk=ot.pk) AND ot.pk<25;
SELECT pk FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it WHERE it.uk=ot.pk) AND ot.pk<25;
set optimizer_switch="firstmatch=off,materialization=on";
select @@optimizer_switch;
EXPLAIN SELECT 1 as a FROM dual WHERE NOT EXISTS (SELECT * FROM t1 AS it);
SELECT 1 as a FROM dual WHERE NOT EXISTS (SELECT * FROM t1 AS it);
EXPLAIN SELECT 1 as a FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it);
SELECT 1 as a FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it);
EXPLAIN SELECT pk FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it WHERE it.uk=ot.pk) AND ot.pk<25;
EXPLAIN FORMAT=JSON SELECT pk FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it WHERE it.uk=ot.pk) AND ot.pk<25;
SELECT pk FROM t2 as ot WHERE NOT EXISTS (SELECT * FROM t1 AS it WHERE it.uk=ot.pk) AND ot.pk<25;
DROP TABLE t1,t2;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES(1,1),(2,2),(3,3);
ANALYZE TABLE t1;
EXPLAIN FORMAT=JSON SELECT * FROM t1 LEFT JOIN t1 t2 ON (t1.a IN (SELECT /*+ NO_SEMIJOIN(FIRSTMATCH,LOOSESCAN,DUPSWEEDOUT) */ a FROM t1 t3 WHERE a > 2));
SELECT * FROM t1 LEFT JOIN t1 t2 ON (t1.a IN (SELECT /*+ NO_SEMIJOIN(FIRSTMATCH,LOOSESCAN,DUPSWEEDOUT) */ a FROM t1 t3 WHERE a > 2));
ALTER TABLE t1 MODIFY a INT NOT NULL;
EXPLAIN SELECT * FROM t1 WHERE t1.a NOT IN (SELECT a FROM t1 t2 WHERE a NOT IN (SELECT a FROM t1 t3));
EXPLAIN SELECT * FROM t1 WHERE t1.a IN (SELECT a FROM t1 t2 WHERE a NOT IN (SELECT a FROM t1 t3));
EXPLAIN SELECT * FROM t1 JOIN t1 t2 ON t1.a>t2.a AND NOT EXISTS(SELECT * FROM t1 t3, t1 t4 WHERE t3.a=t1.a);
EXPLAIN SELECT * FROM t1 WHERE t1.a NOT IN (SELECT t3.a FROM t1 t3);
EXPLAIN SELECT * FROM t1 WHERE t1.a <> ALL (SELECT t3.a FROM t1 t3);
ALTER TABLE t1 MODIFY a INT NULL;
EXPLAIN SELECT * FROM t1 WHERE EXISTS(SELECT * FROM t1 t3);
EXPLAIN SELECT * FROM t1 WHERE NOT EXISTS(SELECT * FROM t1 t3);
EXPLAIN SELECT * FROM t1 WHERE EXISTS(SELECT * FROM t1 t3) IS TRUE;
EXPLAIN SELECT * FROM t1 WHERE EXISTS(SELECT * FROM t1 t3) IS FALSE;
EXPLAIN SELECT * FROM t1 WHERE EXISTS(SELECT * FROM t1 t3) IS UNKNOWN;
EXPLAIN SELECT * FROM t1 WHERE EXISTS(SELECT * FROM t1 t3) IS NOT TRUE;
EXPLAIN SELECT * FROM t1 WHERE EXISTS(SELECT * FROM t1 t3) IS NOT FALSE;
EXPLAIN SELECT * FROM t1 WHERE EXISTS(SELECT * FROM t1 t3) IS NOT UNKNOWN;
EXPLAIN SELECT * FROM t1 WHERE t1.a IN (SELECT t3.a FROM t1 t3);
EXPLAIN SELECT * FROM t1 WHERE t1.a NOT IN (SELECT t3.a FROM t1 t3);
EXPLAIN SELECT * FROM t1 WHERE NOT EXISTS (SELECT t3.a FROM t1 t3 WHERE t3.a=t1.a);
EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS TRUE;
EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS FALSE;
EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS UNKNOWN;
EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3));
SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3));
EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NOT TRUE;
EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NOT FALSE;
EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NOT UNKNOWN;
EXPLAIN SELECT * FROM t1 WHERE (NOT t1.a IN (SELECT t3.a FROM t1 t3)) IS TRUE;
EXPLAIN SELECT * FROM t1 WHERE (NOT t1.a IN (SELECT t3.a FROM t1 t3)) IS FALSE;
EXPLAIN SELECT * FROM t1 WHERE (NOT t1.a IN (SELECT t3.a FROM t1 t3)) IS UNKNOWN;
EXPLAIN SELECT * FROM t1 WHERE (NOT t1.a IN (SELECT t3.a FROM t1 t3)) IS NOT TRUE;
EXPLAIN SELECT * FROM t1 WHERE (NOT t1.a IN (SELECT t3.a FROM t1 t3)) IS NOT FALSE;
EXPLAIN SELECT * FROM t1 WHERE (NOT t1.a IN (SELECT t3.a FROM t1 t3)) IS NOT UNKNOWN;
EXPLAIN SELECT * FROM t1 WHERE (NOT t1.a IN (SELECT /*+ NO_SEMIJOIN() */ t3.a FROM t1 t3)) IS FALSE;
EXPLAIN SELECT * FROM t1 WHERE NOT ((t1.a IN (SELECT /*+ NO_SEMIJOIN() */ t3.a FROM t1 t3)) IS TRUE);
DROP TABLE t1;
CREATE TABLE t1 ( pk int NOT NULL, col_varchar_key varchar(1), PRIMARY KEY (pk), KEY idx_cc_col_varchar_key (col_varchar_key) );
INSERT INTO t1 VALUES (2,"a");
CREATE TABLE t2 LIKE t1;
EXPLAIN SELECT col_varchar_key FROM t1 WHERE NOT EXISTS (SELECT /*+ NO_SEMIJOIN(FIRSTMATCH) */ subquery2_t1.col_varchar_key AS subquery2_field1 FROM t2 AS subquery2_t1 LEFT JOIN  t1 AS subquery2_t2 INNER JOIN t1 AS subquery2_t3 ON TRUE ON TRUE WHERE subquery2_t2.col_varchar_key <> subquery2_t1. col_varchar_key OR subquery2_t1.col_varchar_key >= '2'    ) AND t1.pk IN (2);
SELECT col_varchar_key FROM t1 WHERE NOT EXISTS (SELECT /*+ NO_SEMIJOIN(FIRSTMATCH) */ subquery2_t1.col_varchar_key AS subquery2_field1 FROM t2 AS subquery2_t1 LEFT JOIN  t1 AS subquery2_t2 INNER JOIN t1 AS subquery2_t3 ON TRUE ON TRUE WHERE subquery2_t2.col_varchar_key <> subquery2_t1. col_varchar_key OR subquery2_t1.col_varchar_key >= '2'    ) AND t1.pk IN (2);
DROP TABLE t1, t2;
CREATE TABLE t1 ( pk int NOT NULL AUTO_INCREMENT, col_int_key int, PRIMARY KEY (pk), KEY idx_cc_col_int_key (col_int_key));
INSERT INTO t1 VALUES(1,1);
INSERT INTO t1 (col_int_key) SELECT col_int_key*2 from t1;
INSERT INTO t1 (col_int_key) SELECT col_int_key*2 from t1;
INSERT INTO t1 (col_int_key) SELECT col_int_key*2 from t1;
INSERT INTO t1 (col_int_key) SELECT col_int_key*2 from t1;
INSERT INTO t1 (col_int_key) SELECT col_int_key*2 from t1;
INSERT INTO t1 (col_int_key) SELECT col_int_key*2 from t1;
ANALYZE TABLE t1;
EXPLAIN SELECT t1.col_int_key FROM t1 AS t1 LEFT JOIN t1 AS t2 ON t1.pk NOT IN (SELECT 1 FROM t1 AS subq);
DROP TABLE t1;
CREATE TABLE t1 ( pk INT NOT NULL, col_int INT NOT NULL, PRIMARY KEY (pk) );
EXPLAIN SELECT alias1.pk FROM t1 AS alias1 LEFT JOIN (SELECT alias2.* FROM t1 LEFT JOIN t1 AS alias2 ON TRUE WHERE NOT EXISTS (SELECT pk FROM t1 AS sj1) ) AS alias3 ON alias3.pk = alias1.col_int AND NOT EXISTS (SELECT * FROM t1 AS sj2 WHERE (SELECT 1) IS NULL);
SELECT alias1.pk FROM t1 AS alias1 LEFT JOIN (SELECT alias2.* FROM t1 LEFT JOIN t1 AS alias2 ON TRUE WHERE NOT EXISTS (SELECT pk FROM t1 AS sj1) ) AS alias3 ON alias3.pk = alias1.col_int AND NOT EXISTS (SELECT * FROM t1 AS sj2 WHERE (SELECT 1) IS NULL);
DROP TABLE t1;
CREATE TABLE t1 ( col_int INT NOT NULL, col_int2 INT NOT NULL );
SELECT * FROM t1 AS alias1 LEFT JOIN t1 AS alias2 ON NOT EXISTS ( SELECT * FROM ( SELECT * FROM t1 WHERE col_int NOT IN ( SELECT sq1_alias1 . col_int2 FROM t1 AS sq1_alias1 ) ) AS alias3 );
DROP TABLE t1;
CREATE TABLE t1 ( col_int INT, col_int2 INT, key(col_int) );
INSERT INTO t1 VALUES(1,1),(2,2),(null,null);
ANALYZE TABLE t1;
SET OPTIMIZER_SWITCH="semijoin=off";
SET OPTIMIZER_SWITCH="materialization=off";
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2);
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2);
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS TRUE;
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS TRUE;
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS FALSE;
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS FALSE;
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 NOT IN (SELECT col_int FROM t1 t2);
SELECT * FROM t1 WHERE t1.col_int+1 NOT IN (SELECT col_int FROM t1 t2);
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS UNKNOWN;
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS UNKNOWN;
SET OPTIMIZER_SWITCH="materialization=on,subquery_materialization_cost_based=off";
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2);
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2);
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS TRUE;
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS TRUE;
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS FALSE;
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS FALSE;
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 NOT IN (SELECT col_int FROM t1 t2);
SELECT * FROM t1 WHERE t1.col_int+1 NOT IN (SELECT col_int FROM t1 t2);
EXPLAIN SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS UNKNOWN;
SELECT * FROM t1 WHERE t1.col_int+1 IN (SELECT col_int FROM t1 t2) IS UNKNOWN;
SET OPTIMIZER_SWITCH=DEFAULT;
DROP TABLE t1;
CREATE TABLE t1 ( pk INT NOT NULL, col_int INT NOT NULL, PRIMARY KEY (pk) ) ;
ANALYZE TABLE t1;
SET OPTIMIZER_SWITCH="block_nested_loop=off,firstmatch=off";
EXPLAIN SELECT * FROM t1 LEFT JOIN t1 AS t2 ON 1 AND t1.col_int > ( SELECT @var FROM t1 as t3 ) AND NOT EXISTS ( SELECT * FROM t1 as t4);
SELECT * FROM t1 LEFT JOIN t1 AS t2 ON 1 AND t1.col_int > ( SELECT @var FROM t1 as t3 ) AND NOT EXISTS ( SELECT * FROM t1 as t4);
SELECT * FROM t1 LEFT JOIN (t1 AS t2 LEFT JOIN t1 AS sq ON 1=1) ON 1 AND t1.col_int > ( SELECT @var FROM t1 AS t4 ) WHERE sq.pk IS NULL;
