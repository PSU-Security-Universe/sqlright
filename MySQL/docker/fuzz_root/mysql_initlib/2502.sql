set optimizer_trace_max_mem_size=1048576;
set end_markers_in_json=on;
set optimizer_trace="enabled=on";
SET @old_sql_mode = @@sql_mode;
SET @@sql_mode='ONLY_FULL_GROUP_BY';
create table t1(a int, b int, c int) engine=InnoDB;
create algorithm=merge view v1 as select t1.a*2 as a, t1.b*2 as b, t1.c*2 as c from t1;
show create view v1;
select sin(b) as z from t1 group by sin(b);
select sin(b) as z from v1 group by sin(b);
select sin(b) as z from t1 group by b;
select sin(b) as z from v1 group by b;
select sin(b) as z from v1 group by z;
drop view v1;
create algorithm=temptable view v1 as select t1.a*2 as a, t1.b*2 as b, t1.c*2 as c from t1;
show create view v1;
select sin(b) as z from t1 group by sin(b);
select sin(b) as z from v1 group by sin(b);
select sin(b) as z from t1 group by b;
select sin(b) as z from v1 group by b;
select sin(b) as z from v1 group by z;
drop view v1;
drop table t1;
CREATE TABLE group_by_test2 ( id int unsigned primary key, cat int unsigned not null, name varchar(10), num int unsigned );
INSERT INTO group_by_test2 (id,cat,name,num) VALUES (1,10,'foo',2), (2,11,'foo',1), (3,22,'bar',3), (4,23,'bar',7), (5,34,'test',7);
SELECT cat, name, SUM(num) FROM group_by_test2 GROUP BY cat;
ALTER TABLE group_by_test2 ADD UNIQUE INDEX (cat);
SELECT cat, name, SUM(num) FROM group_by_test2 GROUP BY cat;
SELECT cat, name, SUM(num) FROM group_by_test2 GROUP BY cat WITH ROLLUP;
SELECT cat, length(cat), SUM(num) FROM group_by_test2 GROUP BY cat WITH ROLLUP;
DROP TABLE group_by_test2;
CREATE TABLE t1 ( col_int_key INT, col_varchar_key VARCHAR(1) );
CREATE TABLE t2 ( pk INTEGER, col_int_key INTEGER );
CREATE VIEW view_b AS SELECT * FROM t2;
SELECT MIN( alias2.col_int_key ), alias2.col_int_key FROM t1 AS alias1, t2 AS alias2 WHERE alias1.col_int_key IS NULL;
SELECT MIN( alias2.col_int_key ), alias2.col_int_key FROM t1 AS alias1, view_b AS alias2 WHERE alias1.col_int_key IS NULL;
DROP TABLE t1, t2;
DROP VIEW view_b;
create table t1( a int, b int not null, c int not null, d int, unique key(b,c), unique key(b,d) );
select sin(a) as z from t1 group by b;
select sin(a) as z from t1 group by d,b;
select sin(a) as z from t1 group by c,b;
select sin(a+b*c) as z from t1 group by c,b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select (select sin(a)) as z from t1 group by d,b;
select (select sin(a)) as z from t1 group by c,b;
select sin(a) as z from t1 group by c*2,b*2;
select sin(a) as z from t1 where b=2 group by c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from t1, t1 as t2 where t2.a=t1.a group by t1.b,t1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from t1, t1 as t2 where t2.b=t1.b and t2.c=t1.c group by t1.b,t1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t3.a from t1, t1 as t2, t1 as t3 where t3.b=t2.b and t3.c=t1.d and t2.b=t1.b and t2.c=t1.c group by t1.b,t1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
create table t3(pk int primary key, b int);
select t3.b from  t1,t1 as t2,t3 where t3.pk=t2.d and t2.b=t1.b and t2.c=t1.a group by t1.b,t1.c;
drop table t3;
select (select t1.b from t1 where t2.b=t1.b group by t1.a) from t1 as t2;
create table t2 like t1;
delete from t1;
insert into t1 (a,b) values(1,10),(2,20);
insert into t2 (a,b) values(1,-10);
select t1.a,t2.a from t1 left join t2 on t2.a=t1.a and t2.b=t1.b;
select t1.a from t1 left join t2 on t2.a=t1.a and t2.b=t1.b group by t2.a;
select t1.a,t2.a from t1 left join t2 on 42=t1.a and t2.b=t1.b;
select t1.a from t1 left join t2 on 42=t1.a and t2.b=t1.b group by t2.a;
select t1.a from t1 left join t2 on t2.b=t1.a group by t2.b;
select t1.a from t1 left join t2 on 42=t1.a group by t2.a;
select t1.c from t1 left join t2 on t1.a=t1.c group by t1.a;
select t1.b from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+t2.b)>0.5 and sin(t1.a+t2.d)<0.9 group by t1.a;
select t1.a,t2.d from t1 left join t2 on t1.a=t2.c and t1.d=t2.b and cos(t2.c+t2.b)>0.5 and sin(t1.a+t2.d)<0.9 group by t1.a,t1.d;
select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+rand())>0.5 group by t1.a;
select t1.a, ANY_VALUE(t2.c) from t1 left join t2 on t1.a=t2.c and cos(t2.c+rand())>0.5 group by t1.a;
prepare s from 'select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+ ? )>0.5 group by t1.a';
execute s using @dummy;
select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+t2.b)>0.5 OR sin(t2.d)<0.9 group by t1.a;
select t2.b from t1 left join t1 as t2 on t1.a=t2.b and t1.b group by t1.a;
select t2.b from t1 left join t1 as t2 on t1.a=t2.b and (select t1.b) group by t1.a;
select ANY_VALUE(t1.b) from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
select 3+(5*t1.b) from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
select 3+(5*ANY_VALUE(t1.b)) from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
delete from t1;
insert into t1 (a,b) values(1,10),(1,20),(2,30),(2,40);
select a, sum(b) from t1;
select any_value(a), sum(b) from t1;
select any_value(a), sum(b) from (select * from t1 order by a desc) as d;
select a,b,sum(c) from t1 group by a;
select a,any_value(b),sum(c) from t1 group by a;
select a,any_value(b),sum(c) from (select * from t1 order by a desc, b desc) as d group by a;
set @optimizer_switch_saved=@@optimizer_switch;
create algorithm=merge view v1 as select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1;
show create view v1;
select sin(a) as z from v1 group by b;
select sin(a) as z from v1 group by d,b;
select sin(a) as z from v1 group by c,b;
select (select sin(a)) as z from v1 group by d,b;
select (select sin(a)) as z from v1 group by c,b;
select sin(a) as z from t1 group by c*2,b*2;
select sin(a+b*c) as z from v1 group by c,b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(a) as z from v1 where b=2 group by c;
select sin(t2.a) as z from v1, v1 as t2 where t2.a=v1.a group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from v1, v1 as t2 where t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
select t3.a from v1, v1 as t2, v1 as t3 where t3.b=t2.b and t3.c=v1.d and t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select a from v1 where a=b group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select b from v1 where a=b group by a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from v1 where v1.c=v1.a group by v1.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.a from v1 group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from v1 where v1.c=v1.a group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t2.d from v1, t1 as t2 where v1.a=t2.d and v1.e=t2.a group by t2.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
create algorithm=merge view v1 as select t1.a*2 as a, t1.b as b from t1;
