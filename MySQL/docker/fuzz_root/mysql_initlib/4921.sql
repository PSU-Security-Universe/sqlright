set big_tables=0;
set cte_max_recursion_depth=50000;
select @@cte_max_recursion_depth;
flush status;
with recursive qn as (select * from qn2), qn2 as (select * from qn) select * from qn;
with recursive qn as (select 1 from qn) select * from qn;
with recursive qn as (select 1 from qn union all select 1 from dual) select * from qn;
with recursive qn as (select 1 union all select 1 from qn union all select 1) select * from qn;
with recursive qn as (select 1 from qn union all select 1 from qn) select * from qn;
with recursive qn as (select 1 from dual union all select 1 from dual) select * from qn;
EXPLAIN FORMAT=tree with recursive qn as (select 1 from dual union select 1 from qn) select * from qn;
with recursive qn as (select 1 from dual union select 1 from qn) select * from qn;
create table t1(b int);
insert into t1 values(10),(20),(10);
with recursive qn as (select max(b) as a from t1 union select a from qn) select * from qn;
with recursive qn as (select b as a from t1 union select max(a) from qn) select * from qn;
with recursive qn as (select rank() over (order by b) as a from t1 union select a from qn) select * from qn;
with recursive qn as (select b as a from t1 union select rank() over (order by a) from qn) select * from qn;
drop table t1;
with recursive qn as (select 1 as a from dual union all select max(a) from qn) select * from qn;
with recursive qn as (select 1 as a from dual group by a union all select a+1 from qn where a<3) select * from qn;
with recursive qn as (select 1 as a from dual union all select a from qn group by a) select * from qn;
with recursive qn as ( select 1 from dual union all select 1 from dual where 1 not in(select * from qn)) select * from qn;
with recursive qn as ( select 1 from dual union all select 1 from qn order by (select * from qn)) select * from qn;
with recursive qn as ( select 1 from dual union all select * from (select * from qn) as dt) select * from qn;
with recursive qn as ( select 1 as a from dual union all select 1 from qn order by a) select * from qn;
with recursive qn as ( select 1 as a from dual union all (select 1 from qn order by a)) select * from qn;
with recursive qn as ( (select 1 as a from dual order by a) union all select a+1 from qn where a<3) select * from qn;
with recursive qn as ( select 1 as a from dual union all (select 1 from qn limit 10)) select * from qn;
WITH RECURSIVE qn AS (select 1 union all select distinct 3 from qn) select * from qn;
with recursive qn as (select 1 from dual union all select 1 from dual where 1 not in(select * from qn)) select * from qn;
with recursive qn as (select 123 as a union all select 1+a from qn where a<130) select * from qn;
with recursive qn as (select 1 as n, 2 as un union all select 1+n, un*5-6 from qn where n<10) select * from qn;
with recursive qn as (select 1 as n, 1 as un, 1 as unp1 union all select 1+n, unp1, un+unp1 from qn where n<10) select * from qn;
create table t(c char(3), vc varchar(3), b binary(3), vb varbinary(3));
create table u select cast(c as char(4)), cast(vc as char(4)), cast(b as binary(4)), cast(vb as binary(4)), "abc" as literal_c, cast("abc" as char(4)), _binary "abc" as literal_b, cast(_binary "abc" as binary(4)) from t;
show create table u;
drop table t,u;
with recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, concat(un,'x') from qn where n<10) select * from qn;
with recursive qn as (select cast("x" as char(10)) as a from dual union all select concat("x",a) from qn where length(a)<10) select * from qn;
create temporary table tt select "x" as a from dual;
create temporary table tt1 select "x" as a from dual;
insert into tt1 select concat("x",a) from tt where length(a)<10;
drop temporary table tt,tt1;
with recursive qn as (select "x" as a from dual union all select concat("x",a) from qn where length(a)<10) select * from qn;
with recursive qn as (select 1 as a from dual union all select a*2000 from qn where a<10000000000000000000) select * from qn;
with recursive qn as (select cast(1 as decimal(30,0)) as a from dual union all select a*2000 from qn where a<10000000000000000000) select * from qn;
with recursive qn as (select 123 as a union all select null from qn where a is not null) select * from qn;
with recursive qn as ( select 1 as a,1 union all select a+1,ST_PointFromText('POINT(10 10)') from qn where a<2) select * from qn;
with recursive qn as ( select 1 as a,ST_PointFromText('POINT(10 10)') union all select a+1,1 from qn where a<2) select * from qn;
WITH RECURSIVE qn AS ( select 1 union all select 3, 0 from qn ) select * from qn;
with recursive q (b) as (select 1, 1 union all select 1, 1 from q) select b from q;
with recursive qn as ( select 123 as a union all select 1+qn.a from qn, qn as qn1 where qn1.a<130) select * from qn;
flush status;
with recursive qn as ( select 123 as a union all select 1+a from qn where a<125) select * from qn;
show status like "handler_write";
flush status;
with recursive qn as ( select 123 as a union all select 1+a from qn where a<125) select * from qn, qn as qn1;
show status like "handler_write";
show status like 'Created_tmp%table%';
flush status;
with recursive inner_ as ( select 123 as a union all select 1+a from inner_ where a<125), outer_ as (select * from inner_ limit 10) select * from outer_, outer_ as outer1;
show status like "handler_write";
flush status;
with recursive inner_ as ( select 123 as a union all select 1+a from inner_ where a<125), outer_ as (select inner_.a, inner1.a as a1 from inner_, inner_ as inner1 limit 10) select * from outer_;
show status like "handler_write";
flush status;
with recursive inner_ as ( select 123 as a union all select 1+a from inner_ where a<125), outer_ as (select a from inner_ union all select a*2 from outer_ where a<1000) select a from outer_;
show status like "handler_write";
create table t1(a int);
insert into t1 values(1),(2);
WITH RECURSIVE qn AS ( select 1 from t1 union all select 1 from t1 straight_join qn ) select * from qn;
WITH RECURSIVE qn AS ( select 1 from t1 union all select 1 from t1 left join qn on 1 ) select * from qn;
WITH RECURSIVE qn AS ( select a from t1 where 0 union all select a+1 from qn ) select * from qn;
WITH RECURSIVE qn AS ( select a from t1 where a>10 union all select a+1 from qn ) select * from qn;
insert into t1 values(1),(2);
set @c=0, @d=0;
WITH RECURSIVE qn AS ( select 1,0 as col from t1 union distinct select 1,0 from t1 union all select 3, 0*(@c:=@c+1) from qn where @c<1 union all select 3, 0*(@d:=@d+1) from qn where @d<1 ) select * from qn;
insert into t1 values(1),(2);
set @c=0, @d=0;
WITH RECURSIVE qn AS ( select 1,0 as col from t1 union distinct select 3, 0*(@c:=@c+1) from qn where @c<1 union all select 3, 0*(@d:=@d+1) from qn where @d<1 ) select * from qn;
create table t2 with recursive qn as ( select 123 as a union all select 1+a from qn where a<130) select * from qn;
select * from t2;
drop table t2;
delete from t1;
insert into t1 with recursive qn as ( select 123 as a union all select 1+a from qn where a<130) select * from qn;
select * from t1;
delete from t1;
insert into t1 values(1),(2);
insert into t1 with recursive qn as ( select 123 as a union all select 1+qn.a from qn, t1 where qn.a<125) select * from qn;
select * from t1;
drop table t1;
create temporary table t1(a int);
insert into t1 with recursive qn as ( select 123 as a union all select 1+a from qn where a<130) select * from qn;
select * from t1;
drop table t1;
create view v1 as with recursive qn as ( select 123 as a union all select 1+a from qn where a<130) select * from qn;
select * from v1;
drop view v1;
explain with recursive qn (n) as ( select 1 where 0 union all select n+1 from qn where 0 ) select * from qn;
with recursive qn (n) as ( select 1 where 0 union all select n+1 from qn where 0 ) select * from qn;
explain with recursive qn (n) as ( select 1 where 1 union all select n+1 from qn where 0 ) select * from qn;
with recursive qn (n) as ( select 1 where 1 union all select n+1 from qn where 0 ) select * from qn;
explain with recursive q (b) as (select 1 union all select 1+b from q where b<10) select (select q1.b from q as q2 where q2.b=3) from q as q1 where q1.b=3;
with recursive q (b) as (select 1 union all select 1+b from q where b<10) select (select q1.b from q as q2 where q2.b=3) from q as q1 where q1.b=3;
create table t1(a int);
insert into t1 with recursive qn (n) as ( select 1 union all select n+1 from qn where n<10 ) select * from qn;
select * from t1;
with recursive qn (n) as ( select 5 union all select n+2 from qn where n<10 ) delete t1 from t1 where a in (select * from qn);
select * from t1;
with recursive qn (n) as ( select 4 union all select n+2 from qn where n<10 ) delete from t1 where a in (select * from qn);
select * from t1;
with recursive qn (n) as ( select 2 union all select n+2 from qn where n<10 ) update t1,qn set t1.a=qn.n where t1.a=1+qn.n;
select * from t1;
drop table t1;
CREATE TABLE employees ( ID INT PRIMARY KEY, NAME VARCHAR(100), MANAGER_ID INT, INDEX (MANAGER_ID), FOREIGN KEY (MANAGER_ID) REFERENCES employees(ID) );
INSERT INTO employees VALUES (333, "Yasmina", NULL), (198, "John", 333), (692, "Tarek", 333), (29, "Pedro", 198), (4610, "Sarah", 29), (72, "Pierre", 29), (123, "Adil", 692);
ANALYZE TABLE employees;
WITH RECURSIVE employees_extended(ID, NAME, PATH) AS ( SELECT ID, NAME, CAST(ID AS CHAR(200)) FROM employees WHERE MANAGER_ID IS NULL UNION ALL SELECT S.ID, S.NAME, CONCAT(M.PATH, ",", S.ID) FROM employees_extended M STRAIGHT_JOIN employees S ON M.ID=S.MANAGER_ID ) SELECT * FROM employees_extended ORDER BY PATH;
WITH RECURSIVE employees_extended AS ( SELECT ID, NAME, CAST(ID AS CHAR(200)) AS PATH FROM employees WHERE MANAGER_ID IS NULL UNION ALL SELECT S.ID, S.NAME, CONCAT(M.PATH, ",", S.ID) FROM employees_extended M STRAIGHT_JOIN employees S ON M.ID=S.MANAGER_ID ) SELECT * FROM employees_extended;
WITH RECURSIVE employees_extended AS ( SELECT 0 AS SEQ, ID, NAME, CAST(ID AS CHAR(200)) AS PATH FROM employees WHERE MANAGER_ID IS NULL UNION ALL SELECT M.SEQ+1, S.ID, S.NAME, CONCAT(M.PATH, ",", S.ID) FROM employees_extended M STRAIGHT_JOIN employees S ON M.ID=S.MANAGER_ID ) SELECT * FROM employees_extended ORDER BY SEQ, NAME;
WITH RECURSIVE employees_extended AS ( SELECT (@s:=0) AS SEQ, ID, NAME, CAST(ID AS CHAR(200)) AS PATH FROM employees WHERE MANAGER_ID IS NULL UNION ALL SELECT (@s:=@s+1), S.ID, S.NAME, CONCAT(M.PATH, ",", S.ID) FROM employees_extended M STRAIGHT_JOIN employees S ON M.ID=S.MANAGER_ID ) SELECT * FROM employees_extended ORDER BY SEQ;
