SET GLOBAL EVENT_SCHEDULER = OFF;
CREATE DATABASE db1;
USE db1;
CREATE TABLE t1 (a INT, KEY a(a)) ENGINE=INNODB;
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE TABLE t3 (a INT) ENGINE=InnoDB;
INSERT INTO t3 SELECT * FROM t1;
CREATE TABLE trans (a INT) ENGINE=INNODB;
CREATE PROCEDURE test_if_commit() BEGIN ROLLBACK; SELECT IF (COUNT(*) > 0, "YES", "NO") AS "IMPLICIT COMMIT" FROM trans; DELETE FROM trans; COMMIT; END;
SET AUTOCOMMIT = FALSE;
INSERT INTO db1.trans (a) VALUES (1);
select 1 as res from t1 where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
create table t2 like t1;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show create table t2;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
drop table t2;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
create temporary table t2 as select * from t1;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
drop temporary table t2;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
create table t2 as select * from t1;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
update t2 set a=a+1 where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
insert into t2 set a=((1) in (select * from t1));
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
insert into t2 select * from t1;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
replace t2 set a=((1) in (select * from t1));
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
replace t2 select * from t1;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
delete from t2 where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
delete t2, t3 from t2, t3 where (1) in (select * from t1);
CALL db1.test_if_commit();
select * from t2;
INSERT INTO db1.trans (a) VALUES (1);
update t2, t3 set t3.a=t2.a, t2.a=null where (1) in (select * from t1);
CALL db1.test_if_commit();
create table t4 (a varchar(100));
INSERT INTO db1.trans (a) VALUES (1);
load data infile '../../std_data/words.dat' into table t4;
CALL db1.test_if_commit();
drop table t4;
INSERT INTO db1.trans (a) VALUES (1);
show databases where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show tables where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show fields from t1 where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show keys from t1 where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show variables where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show status where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show engine all mutex;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show processlist;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show engine all logs;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show engine all status;
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show charset where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show collation where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show table status where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show triggers where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show open tables where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show procedure status where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
show function status where (1) in (select * from t1);
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
set @a=((1) in (select * from t1));
CALL db1.test_if_commit();
INSERT INTO db1.trans (a) VALUES (1);
do ((1) in (select * from t1));
CALL db1.test_if_commit();
create procedure p1(a int) begin end;
INSERT INTO db1.trans (a) VALUES (1);
call p1((1) in (select * from t1));
CALL db1.test_if_commit();
